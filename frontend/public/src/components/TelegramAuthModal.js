import i18n, { t, getDeviceType } from '../locales/index.js';

class TelegramAuthModal {
  constructor(app) {
    this.app = app;
    this.isVisible = false;
    this.authStatus = 'waiting'; // waiting, authorized, failed, expired
    this.checkInterval = null;
    this.modalElement = null;
    this.init();
  }

  init() {
    this.createModal();
    this.bindEvents();
  }

  createModal() {
    const modalHTML = `
      <div id="telegramAuthModal" class="telegram-auth-modal" style="display: none;">
        <div class="modal-overlay"></div>
        <div class="modal-content">
          <div class="modal-header">
            <h3 class="modal-title">${t('telegramAuth.title')}</h3>
            <button class="modal-close" aria-label="${t('common.close')}">√ó</button>
          </div>
          
          <div class="modal-body">
            <div class="auth-subtitle">${t('telegramAuth.subtitle')}</div>
            
            <!-- Bot‰ø°ÊÅØ -->
            <div class="bot-info-section">
              <h4>${t('telegramAuth.botInfo.title')}</h4>
              <div class="bot-info">
                <div class="bot-avatar">
                  <svg width="48" height="48" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.161c-.18 1.897-.962 6.502-1.359 8.627-.168.9-.5 1.201-.82 1.23-.697.064-1.226-.461-1.901-.903-1.056-.692-1.653-1.123-2.678-1.799-1.185-.781-.417-1.21.258-1.911.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.139-5.062 3.345-.48.329-.913.489-1.302.481-.428-.008-1.252-.241-1.865-.44-.752-.244-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.831-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635.099-.002.321.023.465.178.164.172.213.421.227.59-.001.187-.033.321-.1.425z"/>
                  </svg>
                </div>
                <div class="bot-details">
                  <div class="bot-name">@Fit_FitChallengeBOT</div>
                  <div class="bot-description">${t('telegramAuth.botInfo.description')}</div>
                </div>
              </div>
            </div>
            
            <!-- ËÆæÂ§á‰ºòÂåñÊèêÁ§∫ -->
            <div class="device-optimization">
              <div class="device-info">
                <span class="device-icon">üì±</span>
                <span class="device-text">${this.getDeviceOptimizationText()}</span>
              </div>
            </div>
            
            <!-- Êìç‰ΩúÊåáÂºï -->
            <div class="instructions-section">
              <h4>${t('telegramAuth.instructions.title')}</h4>
              <div class="instructions-list">
                <div class="instruction-step">${t('telegramAuth.instructions.step1')}</div>
                <div class="instruction-step">${t('telegramAuth.instructions.step2')}</div>
                <div class="instruction-step">${t('telegramAuth.instructions.step3')}</div>
                <div class="instruction-step">${t('telegramAuth.instructions.step4')}</div>
              </div>
            </div>
            
            <!-- Êìç‰ΩúÊåâÈíÆ -->
            <div class="actions-section">
              <button class="btn btn-primary btn-telegram" id="openTelegramBtn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0zm5.562 8.161c-.18 1.897-.962 6.502-1.359 8.627-.168.9-.5 1.201-.82 1.23-.697.064-1.226-.461-1.901-.903-1.056-.692-1.653-1.123-2.678-1.799-1.185-.781-.417-1.21.258-1.911.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.139-5.062 3.345-.48.329-.913.489-1.302.481-.428-.008-1.252-.241-1.865-.44-.752-.244-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.831-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635.099-.002.321.023.465.178.164.172.213.421.227.59-.001.187-.033.321-.1.425z"/>
                </svg>
                ${t('telegramAuth.actions.openTelegram')}
              </button>
              
              <button class="btn btn-secondary" id="refreshStatusBtn">
                ${t('telegramAuth.actions.refreshStatus')}
              </button>
              
              <button class="btn btn-outline" id="alternativeRegistrationBtn">
                ${t('telegramAuth.actions.alternativeRegistration')}
              </button>
            </div>
            
            <!-- Áä∂ÊÄÅÊòæÁ§∫ -->
            <div class="status-section" id="statusSection" style="display: none;">
              <div class="status-indicator">
                <div class="status-icon" id="statusIcon">‚è≥</div>
                <div class="status-text" id="statusText">${t('telegramAuth.status.waiting')}</div>
              </div>
            </div>
            
            <!-- ÈîôËØØÊòæÁ§∫ -->
            <div class="error-section" id="errorSection" style="display: none;">
              <div class="error-message" id="errorMessage"></div>
            </div>
          </div>
        </div>
      </div>
    `;

    // Ê∑ªÂä†Âà∞È°µÈù¢
    document.body.insertAdjacentHTML('beforeend', modalHTML);
    this.modalElement = document.getElementById('telegramAuthModal');
  }

  bindEvents() {
    // ÂÖ≥Èó≠ÂºπÁ™ó
    const closeBtn = this.modalElement.querySelector('.modal-close');
    const overlay = this.modalElement.querySelector('.modal-overlay');
    
    closeBtn.addEventListener('click', () => this.hide());
    overlay.addEventListener('click', () => this.hide());
    
    // ÊâìÂºÄTelegramÊåâÈíÆ
    const openTelegramBtn = this.modalElement.querySelector('#openTelegramBtn');
    openTelegramBtn.addEventListener('click', () => this.openTelegram());
    
    // Âà∑Êñ∞Áä∂ÊÄÅÊåâÈíÆ
    const refreshStatusBtn = this.modalElement.querySelector('#refreshStatusBtn');
    refreshStatusBtn.addEventListener('click', () => this.refreshStatus());
    
    // Â§áÈÄâÊ≥®ÂÜåÊåâÈíÆ
    const alternativeBtn = this.modalElement.querySelector('#alternativeRegistrationBtn');
    alternativeBtn.addEventListener('click', () => this.showAlternativeRegistration());
    
    // ÈîÆÁõò‰∫ã‰ª∂
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && this.isVisible) {
        this.hide();
      }
    });
  }

  // Ëé∑ÂèñËÆæÂ§á‰ºòÂåñÊñáÊú¨
  getDeviceOptimizationText() {
    const deviceType = getDeviceType();
    const translations = i18n.getTranslations();
    
    switch (deviceType) {
      case 'ios':
      case 'android':
      case 'mobile':
        return translations.telegramAuth.deviceOptimization.mobile + ': ' + 
               translations.telegramAuth.deviceOptimization.mobileHint;
      case 'desktop':
        return translations.telegramAuth.deviceOptimization.desktop + ': ' + 
               translations.telegramAuth.deviceOptimization.desktopHint;
      default:
        return translations.telegramAuth.deviceOptimization.desktop + ': ' + 
               translations.telegramAuth.deviceOptimization.desktopHint;
    }
  }

  // ÊòæÁ§∫ÂºπÁ™ó
  show() {
    this.isVisible = true;
    this.modalElement.style.display = 'block';
    document.body.style.overflow = 'hidden';
    
    // ÂºÄÂßãÊ£ÄÊü•ÊéàÊùÉÁä∂ÊÄÅ
    this.startStatusCheck();
    
    // Êõ¥Êñ∞UI
    this.updateUI();
  }

  // ÈöêËóèÂºπÁ™ó
  hide() {
    this.isVisible = false;
    this.modalElement.style.display = 'none';
    document.body.style.overflow = '';
    
    // ÂÅúÊ≠¢Áä∂ÊÄÅÊ£ÄÊü•
    this.stopStatusCheck();
    
    // ÈáçÁΩÆÁä∂ÊÄÅ
    this.resetStatus();
  }

  // ÊâìÂºÄTelegram
  openTelegram() {
    const deviceType = getDeviceType();
    
    try {
      if (deviceType === 'mobile') {
        // ÁßªÂä®ËÆæÂ§áÔºöÂ∞ùËØïÊâìÂºÄTelegramÂ∫îÁî®
        this.openTelegramApp();
      } else {
        // Ê°åÈù¢ËÆæÂ§áÔºöÊòæÁ§∫‰∫åÁª¥Á†ÅÊàñÊèê‰æõÈìæÊé•
        this.showQRCodeOrLink();
      }
    } catch (error) {
      console.error('Failed to open Telegram:', error);
      this.showError(t('telegramAuth.errors.botNotFound'));
    }
  }

  // Âú®ÁßªÂä®ËÆæÂ§á‰∏äÊâìÂºÄTelegramÂ∫îÁî®
  openTelegramApp() {
    const telegramUrl = 'tg://resolve?domain=Fit_FitChallengeBOT';
    const webUrl = 'https://t.me/Fit_FitChallengeBOT';
    
    // Â∞ùËØï‰ΩøÁî®tg://ÂçèËÆÆÊâìÂºÄÂ∫îÁî®
    window.location.href = telegramUrl;
    
    // Â¶ÇÊûútg://ÂçèËÆÆÂ§±Ë¥•ÔºåÂª∂ËøüÂêéË∑≥ËΩ¨Âà∞webÁâàÊú¨
    setTimeout(() => {
      window.open(webUrl, '_blank');
    }, 1000);
  }

  // ÊòæÁ§∫‰∫åÁª¥Á†ÅÊàñÈìæÊé•
  showQRCodeOrLink() {
    const webUrl = 'https://t.me/Fit_FitChallengeBOT';
    
    // ÂàõÂª∫‰∫åÁª¥Á†ÅÂºπÁ™ó
    const qrModal = document.createElement('div');
    qrModal.className = 'qr-modal';
    qrModal.innerHTML = `
      <div class="qr-content">
        <h4>${t('telegramAuth.deviceOptimization.qrCode')}</h4>
        <p>${t('telegramAuth.deviceOptimization.qrCodeHint')}</p>
        <div class="qr-link">
          <a href="${webUrl}" target="_blank" class="btn btn-primary">
            ${t('telegramAuth.actions.openTelegram')}
          </a>
        </div>
        <button class="btn btn-secondary qr-close">${t('common.close')}</button>
      </div>
    `;
    
    document.body.appendChild(qrModal);
    
    // ÁªëÂÆöÂÖ≥Èó≠‰∫ã‰ª∂
    const closeBtn = qrModal.querySelector('.qr-close');
    closeBtn.addEventListener('click', () => {
      document.body.removeChild(qrModal);
    });
  }

  // Âà∑Êñ∞Áä∂ÊÄÅ
  refreshStatus() {
    this.checkAuthStatus();
  }

  // ÊòæÁ§∫Â§áÈÄâÊ≥®ÂÜå
  showAlternativeRegistration() {
    this.hide();
    // Ëß¶Âèë‰∫ã‰ª∂ÔºåËÆ©Áà∂ÁªÑ‰ª∂Áü•ÈÅìÁî®Êà∑ÈÄâÊã©‰∫ÜÂ§áÈÄâÊ≥®ÂÜå
    this.app.emit('telegramAuthAlternative');
  }

  // ÂºÄÂßãÁä∂ÊÄÅÊ£ÄÊü•
  startStatusCheck() {
    this.checkInterval = setInterval(() => {
      this.checkAuthStatus();
    }, 3000); // ÊØè3ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
  }

  // ÂÅúÊ≠¢Áä∂ÊÄÅÊ£ÄÊü•
  stopStatusCheck() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval);
      this.checkInterval = null;
    }
  }

  // Ê£ÄÊü•ÊéàÊùÉÁä∂ÊÄÅ
  async checkAuthStatus() {
    try {
      // Ê£ÄÊü•Telegram Web AppÁä∂ÊÄÅ
      if (window.Telegram && window.Telegram.WebApp) {
        const webApp = window.Telegram.WebApp;
        
        if (webApp.initDataUnsafe && webApp.initDataUnsafe.user) {
          // Áî®Êà∑Â∑≤ÊéàÊùÉ
          this.setAuthStatus('authorized');
          this.completeRegistration(webApp.initDataUnsafe.user);
          return;
        }
      }
      
      // Ê£ÄÊü•Êú¨Âú∞Â≠òÂÇ®‰∏≠ÊòØÂê¶ÊúâÊéàÊùÉ‰ø°ÊÅØ
      const authData = localStorage.getItem('telegram_auth_data');
      if (authData) {
        try {
          const userData = JSON.parse(authData);
          this.setAuthStatus('authorized');
          this.completeRegistration(userData);
          return;
        } catch (error) {
          localStorage.removeItem('telegram_auth_data');
        }
      }
      
      // ‰ªçÁÑ∂Á≠âÂæÖÊéàÊùÉ
      this.setAuthStatus('waiting');
      
    } catch (error) {
      console.error('Auth status check failed:', error);
      this.setAuthStatus('failed');
    }
  }

  // ËÆæÁΩÆÊéàÊùÉÁä∂ÊÄÅ
  setAuthStatus(status) {
    this.authStatus = status;
    this.updateStatusUI();
  }

  // Êõ¥Êñ∞Áä∂ÊÄÅUI
  updateStatusUI() {
    const statusSection = this.modalElement.querySelector('#statusSection');
    const statusIcon = this.modalElement.querySelector('#statusIcon');
    const statusText = this.modalElement.querySelector('#statusText');
    const errorSection = this.modalElement.querySelector('#errorSection');
    
    const translations = i18n.getTranslations();
    
    switch (this.authStatus) {
      case 'waiting':
        statusSection.style.display = 'block';
        errorSection.style.display = 'none';
        statusIcon.textContent = '‚è≥';
        statusIcon.className = 'status-icon waiting';
        statusText.textContent = translations.telegramAuth.status.waiting;
        break;
        
      case 'authorized':
        statusSection.style.display = 'block';
        errorSection.style.display = 'none';
        statusIcon.textContent = '‚úÖ';
        statusIcon.className = 'status-icon success';
        statusText.textContent = translations.telegramAuth.status.authorized;
        break;
        
      case 'failed':
        statusSection.style.display = 'block';
        errorSection.style.display = 'none';
        statusIcon.textContent = '‚ùå';
        statusIcon.className = 'status-icon error';
        statusText.textContent = translations.telegramAuth.status.failed;
        break;
        
      case 'expired':
        statusSection.style.display = 'block';
        errorSection.style.display = 'none';
        statusIcon.textContent = '‚è∞';
        statusIcon.className = 'status-icon expired';
        statusText.textContent = translations.telegramAuth.status.expired;
        break;
    }
  }

  // ÊòæÁ§∫ÈîôËØØ
  showError(message) {
    const errorSection = this.modalElement.querySelector('#errorSection');
    const errorMessage = this.modalElement.querySelector('#errorMessage');
    
    errorMessage.textContent = message;
    errorSection.style.display = 'block';
    
    // 3ÁßíÂêéËá™Âä®ÈöêËóèÈîôËØØ
    setTimeout(() => {
      errorSection.style.display = 'none';
    }, 3000);
  }

  // ÂÆåÊàêÊ≥®ÂÜå
  async completeRegistration(telegramUser) {
    try {
      this.app.showLoading(t('common.loading'));
      
      // Ë∞ÉÁî®APIÂÆåÊàêÊ≥®ÂÜå
      const result = await this.app.api.telegramLogin(telegramUser);
      
      if (result.success && result.token && result.user) {
        // ‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØ
        localStorage.setItem('token', result.token);
        localStorage.setItem('user', JSON.stringify(result.user));
        
        // Êõ¥Êñ∞Â∫îÁî®Áä∂ÊÄÅ
        this.app.setToken(result.token);
        this.app.setUser(result.user);
        
        // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
        this.app.showToast(t('success.telegramAuthSuccess'), 'success');
        
        // Âª∂ËøüË∑≥ËΩ¨
        setTimeout(() => {
          this.hide();
          this.app.navigate('home');
        }, 1500);
        
      } else {
        throw new Error(result.error || 'Registration failed');
      }
      
    } catch (error) {
      console.error('Registration failed:', error);
      this.showError(error.message || t('errors.telegramAuthError'));
      this.setAuthStatus('failed');
    } finally {
      this.app.hideLoading();
    }
  }

  // ÈáçÁΩÆÁä∂ÊÄÅ
  resetStatus() {
    this.authStatus = 'waiting';
    this.updateStatusUI();
  }

  // Êõ¥Êñ∞UI
  updateUI() {
    // Ê†πÊçÆÂΩìÂâçËØ≠Ë®ÄÊõ¥Êñ∞ÊñáÊú¨
    this.updateTexts();
    
    // Ê†πÊçÆËÆæÂ§áÁ±ªÂûã‰ºòÂåñÊòæÁ§∫
    this.optimizeForDevice();
  }

  // Êõ¥Êñ∞ÊñáÊú¨
  updateTexts() {
    // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†Âä®ÊÄÅÊñáÊú¨Êõ¥Êñ∞ÈÄªËæë
    // Áî±‰∫éÊàë‰ª¨‰ΩøÁî®‰∫Üt()ÂáΩÊï∞ÔºåÂ§ßÈÉ®ÂàÜÊñáÊú¨‰ºöËá™Âä®Êõ¥Êñ∞
  }

  // Ê†πÊçÆËÆæÂ§áÁ±ªÂûã‰ºòÂåñÊòæÁ§∫
  optimizeForDevice() {
    const deviceType = getDeviceType();
    const modalContent = this.modalElement.querySelector('.modal-content');
    
    if (deviceType === 'mobile') {
      modalContent.classList.add('mobile-optimized');
    } else {
      modalContent.classList.remove('mobile-optimized');
    }
  }

  // ÈîÄÊØÅÁªÑ‰ª∂
  destroy() {
    this.stopStatusCheck();
    if (this.modalElement && this.modalElement.parentNode) {
      this.modalElement.parentNode.removeChild(this.modalElement);
    }
  }
}

export default TelegramAuthModal;
